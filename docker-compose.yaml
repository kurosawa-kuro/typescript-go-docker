services:
  db:
    image: postgres:16
    container_name: ${DB_CONTAINER}
    environment:
      POSTGRES_DB: ${DATABASE}
      POSTGRES_USER: ${USER_NAME}
      POSTGRES_PASSWORD: ${USER_PASSWORD}
      TZ: "Asia/Tokyo"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    env_file:
      - .env
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_NAME} -d ${DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend/src
      dockerfile: ../../docker/go/Dockerfile
    container_name: backend
    volumes:
      - ./backend/src:/app/src:delegated
      - ./.env:/app/src/.env
      - ./backend/.air.toml:/app/.air.toml
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      DB_HOST: ${DB_CONTAINER}
      DATABASE: ${DATABASE}
      DB_PORT: "5432"
      USER_NAME: ${USER_NAME}
      USER_PASSWORD: ${USER_PASSWORD}
      TZ: "Asia/Tokyo"
    working_dir: /app/src
    command: air -c ../.air.toml
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
    container_name: frontend
    volumes:
      - ./frontend:/usr/src/app:cached
      - /usr/src/app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
      - "6006:6006"
    environment:
      NODE_ENV: development
      API_URL: http://backend:8000
      WATCHPACK_POLLING: "true"
      TZ: "Asia/Tokyo"
    working_dir: /usr/src/app
    user: "node"
    command: sh -c "npm install && (npm run dev & npm run storybook --ci)"
    networks:
      - app-network
    depends_on:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - app-network
    depends_on:
      - db

volumes:
  frontend-node-modules:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  app-network:
    driver: bridge

